// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: symphony/cosmwasmpool/v1beta1/model/v3/pool_query_msg.proto

package v3

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ===================== ShareDenomResponse
type ShareDenomResponse struct {
	// share_denom is the share denomination.
	ShareDenom string `protobuf:"bytes,1,opt,name=share_denom,json=shareDenom,proto3" json:"share_denom,omitempty"`
}

func (m *ShareDenomResponse) Reset()         { *m = ShareDenomResponse{} }
func (m *ShareDenomResponse) String() string { return proto.CompactTextString(m) }
func (*ShareDenomResponse) ProtoMessage()    {}
func (*ShareDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5339d1443420cc6b, []int{0}
}
func (m *ShareDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareDenomResponse.Merge(m, src)
}
func (m *ShareDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *ShareDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShareDenomResponse proto.InternalMessageInfo

func (m *ShareDenomResponse) GetShareDenom() string {
	if m != nil {
		return m.ShareDenom
	}
	return ""
}

// ===================== TotalPoolLiquidityResponse
type TotalPoolLiquidityResponse struct {
	// total_pool_liquidity is the total liquidity in the pool denominated in
	// coins.
	TotalPoolLiquidity github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=total_pool_liquidity,json=totalPoolLiquidity,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_pool_liquidity"`
}

func (m *TotalPoolLiquidityResponse) Reset()         { *m = TotalPoolLiquidityResponse{} }
func (m *TotalPoolLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*TotalPoolLiquidityResponse) ProtoMessage()    {}
func (*TotalPoolLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5339d1443420cc6b, []int{1}
}
func (m *TotalPoolLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalPoolLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalPoolLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalPoolLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalPoolLiquidityResponse.Merge(m, src)
}
func (m *TotalPoolLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *TotalPoolLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalPoolLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TotalPoolLiquidityResponse proto.InternalMessageInfo

func (m *TotalPoolLiquidityResponse) GetTotalPoolLiquidity() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalPoolLiquidity
	}
	return nil
}

// ===================== AssetConfig
type AssetConfig struct {
	// denom is the asset denomination.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// normalization_factor is the normalization factor for the asset.
	NormalizationFactor string `protobuf:"bytes,2,opt,name=normalization_factor,json=normalizationFactor,proto3" json:"normalization_factor,omitempty"`
}

func (m *AssetConfig) Reset()         { *m = AssetConfig{} }
func (m *AssetConfig) String() string { return proto.CompactTextString(m) }
func (*AssetConfig) ProtoMessage()    {}
func (*AssetConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5339d1443420cc6b, []int{2}
}
func (m *AssetConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetConfig.Merge(m, src)
}
func (m *AssetConfig) XXX_Size() int {
	return m.Size()
}
func (m *AssetConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AssetConfig proto.InternalMessageInfo

func (m *AssetConfig) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *AssetConfig) GetNormalizationFactor() string {
	if m != nil {
		return m.NormalizationFactor
	}
	return ""
}

// ===================== ListAssetConfigsResponse
type ListAssetConfigsResponse struct {
	// asset_configs is the list of asset configurations.
	AssetConfigs []AssetConfig `protobuf:"bytes,1,rep,name=asset_configs,json=assetConfigs,proto3" json:"asset_configs"`
}

func (m *ListAssetConfigsResponse) Reset()         { *m = ListAssetConfigsResponse{} }
func (m *ListAssetConfigsResponse) String() string { return proto.CompactTextString(m) }
func (*ListAssetConfigsResponse) ProtoMessage()    {}
func (*ListAssetConfigsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5339d1443420cc6b, []int{3}
}
func (m *ListAssetConfigsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAssetConfigsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAssetConfigsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAssetConfigsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAssetConfigsResponse.Merge(m, src)
}
func (m *ListAssetConfigsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAssetConfigsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAssetConfigsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAssetConfigsResponse proto.InternalMessageInfo

func (m *ListAssetConfigsResponse) GetAssetConfigs() []AssetConfig {
	if m != nil {
		return m.AssetConfigs
	}
	return nil
}

func init() {
	proto.RegisterType((*ShareDenomResponse)(nil), "symphony.cosmwasmpool.v1beta1.model.v3.ShareDenomResponse")
	proto.RegisterType((*TotalPoolLiquidityResponse)(nil), "symphony.cosmwasmpool.v1beta1.model.v3.TotalPoolLiquidityResponse")
	proto.RegisterType((*AssetConfig)(nil), "symphony.cosmwasmpool.v1beta1.model.v3.AssetConfig")
	proto.RegisterType((*ListAssetConfigsResponse)(nil), "symphony.cosmwasmpool.v1beta1.model.v3.ListAssetConfigsResponse")
}

func init() {
	proto.RegisterFile("symphony/cosmwasmpool/v1beta1/model/v3/pool_query_msg.proto", fileDescriptor_5339d1443420cc6b)
}

var fileDescriptor_5339d1443420cc6b = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x3f, 0x8f, 0xd3, 0x30,
	0x18, 0xc6, 0x1b, 0xfe, 0x49, 0xb8, 0xb0, 0x84, 0x0e, 0xa5, 0x43, 0x7a, 0xea, 0x80, 0xba, 0x9c,
	0x4d, 0x2f, 0x42, 0x0c, 0x4c, 0xf4, 0x10, 0xd3, 0x0d, 0xa8, 0x20, 0x06, 0x84, 0x88, 0x9c, 0xc4,
	0x97, 0x5a, 0xc4, 0x7e, 0x73, 0x79, 0xdd, 0x40, 0x4e, 0xe2, 0x3b, 0xb0, 0xf3, 0x0d, 0xf8, 0x24,
	0x37, 0xde, 0xc8, 0x04, 0xa8, 0xfd, 0x22, 0xc8, 0x4e, 0x13, 0xa5, 0x62, 0xb9, 0x29, 0x79, 0x9f,
	0xc7, 0x3f, 0xfb, 0x7d, 0x5e, 0x9b, 0xbc, 0xc0, 0x5a, 0x15, 0x6b, 0xd0, 0x35, 0x4b, 0x00, 0xd5,
	0x17, 0x8e, 0xaa, 0x00, 0xc8, 0x59, 0xb5, 0x88, 0x85, 0xe1, 0x0b, 0xa6, 0x20, 0x15, 0x39, 0xab,
	0x42, 0x66, 0xd5, 0xe8, 0x62, 0x23, 0xca, 0x3a, 0x52, 0x98, 0xd1, 0xa2, 0x04, 0x03, 0xfe, 0x93,
	0x16, 0xa6, 0x7d, 0x98, 0xee, 0x61, 0xea, 0x60, 0x5a, 0x85, 0x93, 0x51, 0x06, 0x19, 0x38, 0x84,
	0xd9, 0xbf, 0x86, 0x9e, 0x04, 0x16, 0x02, 0x64, 0x31, 0x47, 0xd1, 0x1d, 0x98, 0x80, 0xd4, 0x8d,
	0x3f, 0x7b, 0x46, 0xfc, 0xb7, 0x6b, 0x5e, 0x8a, 0x57, 0x42, 0x83, 0x5a, 0x09, 0x2c, 0x40, 0xa3,
	0xf0, 0xa7, 0x64, 0x88, 0x56, 0x8d, 0x52, 0x2b, 0x8f, 0xbd, 0x23, 0x6f, 0x7e, 0x7f, 0x45, 0xb0,
	0x5b, 0x38, 0xfb, 0xe1, 0x91, 0xc9, 0x3b, 0x30, 0x3c, 0x7f, 0x03, 0x90, 0x9f, 0xc9, 0x8b, 0x8d,
	0x4c, 0xa5, 0xa9, 0x3b, 0xfe, 0x1b, 0x19, 0x19, 0xeb, 0x46, 0x2e, 0x51, 0xde, 0xfa, 0x63, 0xef,
	0xe8, 0xf6, 0x7c, 0x78, 0xf2, 0x98, 0x36, 0x4d, 0x51, 0xdb, 0x54, 0x17, 0xe4, 0x14, 0xa4, 0x5e,
	0x3e, 0xbd, 0xfa, 0x3d, 0x1d, 0xfc, 0xfc, 0x33, 0x9d, 0x67, 0xd2, 0xac, 0x37, 0x31, 0x4d, 0x40,
	0xb1, 0x7d, 0x82, 0xe6, 0x73, 0x8c, 0xe9, 0x67, 0x66, 0xea, 0x42, 0xa0, 0x03, 0x70, 0xe5, 0x9b,
	0xff, 0xda, 0x98, 0xbd, 0x27, 0xc3, 0x97, 0x88, 0xc2, 0x9c, 0x82, 0x3e, 0x97, 0x99, 0x3f, 0x22,
	0x77, 0xfb, 0x39, 0x9a, 0xc2, 0x5f, 0x90, 0x91, 0x86, 0x52, 0xf1, 0x5c, 0x5e, 0x72, 0x23, 0x41,
	0x47, 0xe7, 0x3c, 0x31, 0x50, 0x8e, 0x6f, 0xb9, 0x45, 0x8f, 0x0e, 0xbc, 0xd7, 0xce, 0x9a, 0x5d,
	0x92, 0xf1, 0x99, 0x44, 0xd3, 0xdb, 0x1b, 0xbb, 0xc8, 0x9f, 0xc8, 0x43, 0x6e, 0xf5, 0x28, 0x69,
	0x8c, 0x7d, 0xd6, 0x90, 0xde, 0xec, 0xfa, 0x68, 0x6f, 0xd3, 0xe5, 0x1d, 0x3b, 0x85, 0xd5, 0x03,
	0xde, 0x3b, 0x67, 0xf9, 0xf1, 0x6a, 0x1b, 0x78, 0xd7, 0xdb, 0xc0, 0xfb, 0xbb, 0x0d, 0xbc, 0xef,
	0xbb, 0x60, 0x70, 0xbd, 0x0b, 0x06, 0xbf, 0x76, 0xc1, 0xe0, 0xc3, 0xb2, 0x37, 0x2b, 0x37, 0x23,
	0x89, 0xc7, 0x39, 0x8f, 0xb1, 0x2d, 0x58, 0x75, 0xf2, 0x9c, 0x7d, 0x3d, 0x7c, 0x7a, 0x6d, 0xc1,
	0x14, 0x66, 0xac, 0x0a, 0xe3, 0x7b, 0xee, 0x35, 0x84, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xac,
	0xd5, 0x64, 0xf0, 0xaa, 0x02, 0x00, 0x00,
}

func (m *ShareDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShareDenom) > 0 {
		i -= len(m.ShareDenom)
		copy(dAtA[i:], m.ShareDenom)
		i = encodeVarintPoolQueryMsg(dAtA, i, uint64(len(m.ShareDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TotalPoolLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalPoolLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalPoolLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalPoolLiquidity) > 0 {
		for iNdEx := len(m.TotalPoolLiquidity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalPoolLiquidity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPoolQueryMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AssetConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NormalizationFactor) > 0 {
		i -= len(m.NormalizationFactor)
		copy(dAtA[i:], m.NormalizationFactor)
		i = encodeVarintPoolQueryMsg(dAtA, i, uint64(len(m.NormalizationFactor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintPoolQueryMsg(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAssetConfigsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAssetConfigsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAssetConfigsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetConfigs) > 0 {
		for iNdEx := len(m.AssetConfigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetConfigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPoolQueryMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPoolQueryMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovPoolQueryMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ShareDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShareDenom)
	if l > 0 {
		n += 1 + l + sovPoolQueryMsg(uint64(l))
	}
	return n
}

func (m *TotalPoolLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TotalPoolLiquidity) > 0 {
		for _, e := range m.TotalPoolLiquidity {
			l = e.Size()
			n += 1 + l + sovPoolQueryMsg(uint64(l))
		}
	}
	return n
}

func (m *AssetConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovPoolQueryMsg(uint64(l))
	}
	l = len(m.NormalizationFactor)
	if l > 0 {
		n += 1 + l + sovPoolQueryMsg(uint64(l))
	}
	return n
}

func (m *ListAssetConfigsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AssetConfigs) > 0 {
		for _, e := range m.AssetConfigs {
			l = e.Size()
			n += 1 + l + sovPoolQueryMsg(uint64(l))
		}
	}
	return n
}

func sovPoolQueryMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPoolQueryMsg(x uint64) (n int) {
	return sovPoolQueryMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShareDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolQueryMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolQueryMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalPoolLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolQueryMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalPoolLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalPoolLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPoolLiquidity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalPoolLiquidity = append(m.TotalPoolLiquidity, types.Coin{})
			if err := m.TotalPoolLiquidity[len(m.TotalPoolLiquidity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolQueryMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolQueryMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalizationFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NormalizationFactor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolQueryMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAssetConfigsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolQueryMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAssetConfigsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAssetConfigsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetConfigs = append(m.AssetConfigs, AssetConfig{})
			if err := m.AssetConfigs[len(m.AssetConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolQueryMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoolQueryMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoolQueryMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPoolQueryMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPoolQueryMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPoolQueryMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPoolQueryMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoolQueryMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPoolQueryMsg = fmt.Errorf("proto: unexpected end of group")
)
