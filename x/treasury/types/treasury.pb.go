// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: symphony/treasury/v1beta1/treasury.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the oracle module.
type Params struct {
	ReserveAllowableOffset        cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=reserve_allowable_offset,json=reserveAllowableOffset,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reserve_allowable_offset"`
	MaxFeeMultiplier              cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=max_fee_multiplier,json=maxFeeMultiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"max_fee_multiplier"`
	UpdateTreasuryEpochIdentifier string                      `protobuf:"bytes,3,opt,name=update_treasury_epoch_identifier,json=updateTreasuryEpochIdentifier,proto3" json:"update_treasury_epoch_identifier,omitempty" yaml:"update_treasury_epoch_identifier"`
	WindowShort                   uint64                      `protobuf:"varint,4,opt,name=window_short,json=windowShort,proto3" json:"window_short,omitempty" yaml:"window_short"`
	WindowLong                    uint64                      `protobuf:"varint,5,opt,name=window_long,json=windowLong,proto3" json:"window_long,omitempty" yaml:"window_long"`
	WindowProbation               uint64                      `protobuf:"varint,6,opt,name=window_probation,json=windowProbation,proto3" json:"window_probation,omitempty" yaml:"window_probation"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fb705442392fd6c, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetUpdateTreasuryEpochIdentifier() string {
	if m != nil {
		return m.UpdateTreasuryEpochIdentifier
	}
	return ""
}

func (m *Params) GetWindowShort() uint64 {
	if m != nil {
		return m.WindowShort
	}
	return 0
}

func (m *Params) GetWindowLong() uint64 {
	if m != nil {
		return m.WindowLong
	}
	return 0
}

func (m *Params) GetWindowProbation() uint64 {
	if m != nil {
		return m.WindowProbation
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "symphony.treasury.v1beta1.Params")
}

func init() {
	proto.RegisterFile("symphony/treasury/v1beta1/treasury.proto", fileDescriptor_8fb705442392fd6c)
}

var fileDescriptor_8fb705442392fd6c = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4d, 0x6b, 0xd4, 0x4e,
	0x18, 0xdf, 0xfc, 0xff, 0xeb, 0xa2, 0xa3, 0x60, 0x89, 0xd2, 0xa6, 0x2d, 0x26, 0x4b, 0x2e, 0x2e,
	0x48, 0x37, 0xac, 0x0a, 0x85, 0xbd, 0xb9, 0xd4, 0x82, 0x50, 0xb5, 0x44, 0x4f, 0x5e, 0x86, 0x49,
	0xf6, 0xd9, 0x64, 0x68, 0x92, 0x27, 0x64, 0x66, 0x5f, 0xf2, 0x2d, 0x04, 0x2f, 0x1e, 0xfb, 0x21,
	0xfc, 0x10, 0x3d, 0x16, 0x4f, 0xe2, 0x21, 0xc8, 0xee, 0xc5, 0xf3, 0x7e, 0x02, 0x49, 0x26, 0x89,
	0xf6, 0x24, 0x78, 0x9b, 0xdf, 0x3b, 0x0c, 0x0f, 0x19, 0x88, 0x3c, 0x4e, 0x43, 0x4c, 0x72, 0x47,
	0x66, 0xc0, 0xc4, 0x3c, 0xcb, 0x9d, 0xc5, 0xc8, 0x03, 0xc9, 0x46, 0x2d, 0x31, 0x4c, 0x33, 0x94,
	0xa8, 0xef, 0x37, 0xce, 0x61, 0x2b, 0xd4, 0xce, 0x03, 0xd3, 0x47, 0x11, 0xa3, 0x70, 0x3c, 0x26,
	0xa0, 0x8d, 0xfb, 0xc8, 0x13, 0x15, 0x3d, 0xd8, 0x57, 0x3a, 0xad, 0x90, 0xa3, 0x40, 0x2d, 0x3d,
	0x0c, 0x30, 0x40, 0xc5, 0x97, 0x2f, 0xc5, 0xda, 0x9f, 0xba, 0xa4, 0x77, 0xce, 0x32, 0x16, 0x0b,
	0xfd, 0x82, 0x18, 0x19, 0x08, 0xc8, 0x16, 0x40, 0x59, 0x14, 0xe1, 0x92, 0x79, 0x11, 0x50, 0x9c,
	0xcd, 0x04, 0x48, 0x43, 0xeb, 0x6b, 0x83, 0x3b, 0x93, 0xd1, 0x55, 0x61, 0x75, 0xbe, 0x17, 0xd6,
	0xa1, 0x2a, 0x16, 0xd3, 0x8b, 0x21, 0x47, 0x27, 0x66, 0x32, 0x1c, 0x9e, 0x41, 0xc0, 0xfc, 0xfc,
	0x04, 0xfc, 0xaf, 0x5f, 0x8e, 0x48, 0xbd, 0x7b, 0x02, 0xbe, 0xbb, 0x5b, 0x57, 0xbe, 0x68, 0x1a,
	0xdf, 0x56, 0x85, 0x3a, 0x25, 0x7a, 0xcc, 0x56, 0x74, 0x06, 0x40, 0xe3, 0x79, 0x24, 0x79, 0x1a,
	0x71, 0xc8, 0x8c, 0xff, 0xfe, 0x75, 0x66, 0x27, 0x66, 0xab, 0x53, 0x80, 0xd7, 0x6d, 0x95, 0x2e,
	0x49, 0x7f, 0x9e, 0x4e, 0x99, 0x04, 0xda, 0x7c, 0x22, 0x85, 0x14, 0xfd, 0x90, 0xf2, 0x29, 0x24,
	0x92, 0xcf, 0xca, 0xb9, 0xff, 0xab, 0xb9, 0x27, 0xdb, 0xc2, 0x7a, 0x9c, 0xb3, 0x38, 0x1a, 0xdb,
	0x7f, 0x4b, 0xd8, 0xee, 0x23, 0x65, 0x79, 0x5f, 0x3b, 0x5e, 0x96, 0x86, 0x57, 0xad, 0xae, 0x8f,
	0xc9, 0xbd, 0x25, 0x4f, 0xa6, 0xb8, 0xa4, 0x22, 0xc4, 0x4c, 0x1a, 0xdd, 0xbe, 0x36, 0xe8, 0x4e,
	0xf6, 0xb6, 0x85, 0xf5, 0x40, 0x2d, 0xfc, 0xa9, 0xda, 0xee, 0x5d, 0x05, 0xdf, 0x95, 0x48, 0x3f,
	0x26, 0x35, 0xa4, 0x11, 0x26, 0x81, 0x71, 0xab, 0x8a, 0xee, 0x6e, 0x0b, 0x4b, 0xbf, 0x11, 0x2d,
	0x45, 0xdb, 0x25, 0x0a, 0x9d, 0x61, 0x12, 0xe8, 0xa7, 0x64, 0xa7, 0xd6, 0xd2, 0x0c, 0x3d, 0x26,
	0x39, 0x26, 0x46, 0xaf, 0x4a, 0x1f, 0x6e, 0x0b, 0x6b, 0xef, 0x46, 0xba, 0x75, 0xd8, 0xee, 0x7d,
	0x45, 0x9d, 0x37, 0xcc, 0xf8, 0xf6, 0xe7, 0x4b, 0xab, 0xf3, 0xf3, 0xd2, 0xd2, 0x26, 0x6f, 0xae,
	0xd6, 0xa6, 0x76, 0xbd, 0x36, 0xb5, 0x1f, 0x6b, 0x53, 0xfb, 0xb8, 0x31, 0x3b, 0xd7, 0x1b, 0xb3,
	0xf3, 0x6d, 0x63, 0x76, 0x3e, 0x3c, 0x0f, 0xb8, 0x0c, 0xe7, 0xde, 0xd0, 0xc7, 0xd8, 0xa9, 0xbe,
	0x9f, 0x8b, 0xa3, 0x88, 0x79, 0xa2, 0x01, 0xce, 0xe2, 0xe9, 0xb1, 0xb3, 0xfa, 0x7d, 0xe2, 0x32,
	0x4f, 0x41, 0x78, 0xbd, 0xea, 0xd8, 0x9e, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x84, 0x6d, 0xbe,
	0x67, 0x04, 0x03, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReserveAllowableOffset.Equal(that1.ReserveAllowableOffset) {
		return false
	}
	if !this.MaxFeeMultiplier.Equal(that1.MaxFeeMultiplier) {
		return false
	}
	if this.UpdateTreasuryEpochIdentifier != that1.UpdateTreasuryEpochIdentifier {
		return false
	}
	if this.WindowShort != that1.WindowShort {
		return false
	}
	if this.WindowLong != that1.WindowLong {
		return false
	}
	if this.WindowProbation != that1.WindowProbation {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WindowProbation != 0 {
		i = encodeVarintTreasury(dAtA, i, uint64(m.WindowProbation))
		i--
		dAtA[i] = 0x30
	}
	if m.WindowLong != 0 {
		i = encodeVarintTreasury(dAtA, i, uint64(m.WindowLong))
		i--
		dAtA[i] = 0x28
	}
	if m.WindowShort != 0 {
		i = encodeVarintTreasury(dAtA, i, uint64(m.WindowShort))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UpdateTreasuryEpochIdentifier) > 0 {
		i -= len(m.UpdateTreasuryEpochIdentifier)
		copy(dAtA[i:], m.UpdateTreasuryEpochIdentifier)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.UpdateTreasuryEpochIdentifier)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.MaxFeeMultiplier.Size()
		i -= size
		if _, err := m.MaxFeeMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTreasury(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ReserveAllowableOffset.Size()
		i -= size
		if _, err := m.ReserveAllowableOffset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTreasury(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTreasury(dAtA []byte, offset int, v uint64) int {
	offset -= sovTreasury(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReserveAllowableOffset.Size()
	n += 1 + l + sovTreasury(uint64(l))
	l = m.MaxFeeMultiplier.Size()
	n += 1 + l + sovTreasury(uint64(l))
	l = len(m.UpdateTreasuryEpochIdentifier)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	if m.WindowShort != 0 {
		n += 1 + sovTreasury(uint64(m.WindowShort))
	}
	if m.WindowLong != 0 {
		n += 1 + sovTreasury(uint64(m.WindowLong))
	}
	if m.WindowProbation != 0 {
		n += 1 + sovTreasury(uint64(m.WindowProbation))
	}
	return n
}

func sovTreasury(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTreasury(x uint64) (n int) {
	return sovTreasury(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTreasury
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAllowableOffset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReserveAllowableOffset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFeeMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTreasuryEpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTreasuryEpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowShort", wireType)
			}
			m.WindowShort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WindowShort |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowLong", wireType)
			}
			m.WindowLong = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WindowLong |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowProbation", wireType)
			}
			m.WindowProbation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WindowProbation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTreasury(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTreasury
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTreasury(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTreasury
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTreasury
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTreasury
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTreasury
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTreasury        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTreasury          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTreasury = fmt.Errorf("proto: unexpected end of group")
)
