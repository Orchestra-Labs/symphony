// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: symphony/stablestaking/v1beta1/stablestaking.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	RewardRate      string        `protobuf:"bytes,1,opt,name=reward_rate,json=rewardRate,proto3" json:"reward_rate,omitempty"`
	UnbondingTime   time.Duration `protobuf:"bytes,2,opt,name=unbonding_time,json=unbondingTime,proto3,stdduration" json:"unbonding_time"`
	SupportedTokens []string      `protobuf:"bytes,3,rep,name=supported_tokens,json=supportedTokens,proto3" json:"supported_tokens,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ae0713c4e1380de, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetRewardRate() string {
	if m != nil {
		return m.RewardRate
	}
	return ""
}

func (m *Params) GetUnbondingTime() time.Duration {
	if m != nil {
		return m.UnbondingTime
	}
	return 0
}

func (m *Params) GetSupportedTokens() []string {
	if m != nil {
		return m.SupportedTokens
	}
	return nil
}

type GenesisState struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ae0713c4e1380de, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type StakingPool struct {
	Token       string                      `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	TotalStaked cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=total_staked,json=totalStaked,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"total_staked" yaml:"total_staked"`
	TotalShares cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=total_shares,json=totalShares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"total_shares" yaml:"total_shares"`
}

func (m *StakingPool) Reset()         { *m = StakingPool{} }
func (m *StakingPool) String() string { return proto.CompactTextString(m) }
func (*StakingPool) ProtoMessage()    {}
func (*StakingPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ae0713c4e1380de, []int{2}
}
func (m *StakingPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingPool.Merge(m, src)
}
func (m *StakingPool) XXX_Size() int {
	return m.Size()
}
func (m *StakingPool) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingPool.DiscardUnknown(m)
}

var xxx_messageInfo_StakingPool proto.InternalMessageInfo

func (m *StakingPool) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type UserStake struct {
	Address string                      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Shares  cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=shares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares" yaml:"shares"`
	Epoch   int64                       `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *UserStake) Reset()         { *m = UserStake{} }
func (m *UserStake) String() string { return proto.CompactTextString(m) }
func (*UserStake) ProtoMessage()    {}
func (*UserStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ae0713c4e1380de, []int{3}
}
func (m *UserStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserStake.Merge(m, src)
}
func (m *UserStake) XXX_Size() int {
	return m.Size()
}
func (m *UserStake) XXX_DiscardUnknown() {
	xxx_messageInfo_UserStake.DiscardUnknown(m)
}

var xxx_messageInfo_UserStake proto.InternalMessageInfo

func (m *UserStake) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserStake) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type UnbondingRequest struct {
	Address    string                      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Shares     cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=shares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares" yaml:"shares"`
	UnbondTime int64                       `protobuf:"varint,3,opt,name=unbondTime,proto3" json:"unbondTime,omitempty"`
}

func (m *UnbondingRequest) Reset()         { *m = UnbondingRequest{} }
func (m *UnbondingRequest) String() string { return proto.CompactTextString(m) }
func (*UnbondingRequest) ProtoMessage()    {}
func (*UnbondingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ae0713c4e1380de, []int{4}
}
func (m *UnbondingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingRequest.Merge(m, src)
}
func (m *UnbondingRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingRequest proto.InternalMessageInfo

func (m *UnbondingRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UnbondingRequest) GetUnbondTime() int64 {
	if m != nil {
		return m.UnbondTime
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "symphony.stablestaking.v1beta1.Params")
	proto.RegisterType((*GenesisState)(nil), "symphony.stablestaking.v1beta1.GenesisState")
	proto.RegisterType((*StakingPool)(nil), "symphony.stablestaking.v1beta1.StakingPool")
	proto.RegisterType((*UserStake)(nil), "symphony.stablestaking.v1beta1.UserStake")
	proto.RegisterType((*UnbondingRequest)(nil), "symphony.stablestaking.v1beta1.UnbondingRequest")
}

func init() {
	proto.RegisterFile("symphony/stablestaking/v1beta1/stablestaking.proto", fileDescriptor_7ae0713c4e1380de)
}

var fileDescriptor_7ae0713c4e1380de = []byte{
	// 540 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xb1, 0x8e, 0xd3, 0x4e,
	0x10, 0xc6, 0xb3, 0xff, 0xfc, 0x09, 0x64, 0x93, 0x83, 0x93, 0xb9, 0x22, 0x77, 0x48, 0x4e, 0xe4,
	0x02, 0x85, 0x02, 0x5b, 0x17, 0x90, 0x10, 0x57, 0x46, 0x91, 0x90, 0xd0, 0x15, 0x27, 0x27, 0xd7,
	0x20, 0xa1, 0x68, 0x6d, 0x0f, 0x8e, 0x15, 0xdb, 0x63, 0xbc, 0xeb, 0x03, 0x3f, 0x02, 0x1d, 0x25,
	0xa2, 0xe2, 0x71, 0xae, 0xbc, 0x12, 0x51, 0x04, 0x48, 0xde, 0x80, 0x27, 0x40, 0xde, 0x5d, 0x47,
	0x39, 0x0a, 0x84, 0x28, 0xe8, 0xf2, 0x7d, 0xbb, 0xf3, 0xed, 0x6f, 0x46, 0x13, 0xd3, 0x11, 0x2f,
	0x93, 0x6c, 0x81, 0x69, 0xe9, 0x70, 0xc1, 0xbc, 0x18, 0xb8, 0x60, 0xcb, 0x28, 0x0d, 0x9d, 0x8b,
	0x63, 0x0f, 0x04, 0x3b, 0xbe, 0xee, 0xda, 0x59, 0x8e, 0x02, 0x0d, 0xb3, 0xae, 0xb1, 0xaf, 0x9f,
	0xea, 0x9a, 0xa3, 0x43, 0x1f, 0x79, 0x82, 0x7c, 0x2e, 0x6f, 0x3b, 0x4a, 0xa8, 0xd2, 0xa3, 0x83,
	0x10, 0x43, 0x54, 0x7e, 0xf5, 0x4b, 0xbb, 0x66, 0x88, 0x18, 0xc6, 0xe0, 0x48, 0xe5, 0x15, 0xaf,
	0x9c, 0xa0, 0xc8, 0x99, 0x88, 0x30, 0xad, 0xcf, 0x55, 0x86, 0xe3, 0x31, 0x0e, 0x5b, 0x32, 0x1f,
	0x23, 0x7d, 0x6e, 0x7d, 0x22, 0xb4, 0x75, 0xc6, 0x72, 0x96, 0x70, 0xa3, 0x4f, 0x3b, 0x39, 0xbc,
	0x61, 0x79, 0x30, 0xcf, 0x99, 0x80, 0x1e, 0x19, 0x90, 0x61, 0xdb, 0xa5, 0xca, 0x72, 0x99, 0x00,
	0xe3, 0x39, 0xbd, 0x5d, 0xa4, 0x1e, 0xa6, 0x41, 0x94, 0x86, 0x73, 0x11, 0x25, 0xd0, 0xfb, 0x6f,
	0x40, 0x86, 0x9d, 0xd1, 0xa1, 0xad, 0x20, 0xec, 0x1a, 0xc2, 0x9e, 0x68, 0x88, 0xf1, 0xad, 0xcb,
	0x55, 0xbf, 0xf1, 0xe1, 0x6b, 0x9f, 0xb8, 0x7b, 0xdb, 0xd2, 0x59, 0x94, 0x80, 0xf1, 0x80, 0xee,
	0xf3, 0x22, 0xcb, 0x30, 0x17, 0x10, 0xcc, 0x05, 0x2e, 0x21, 0xe5, 0xbd, 0xe6, 0xa0, 0x39, 0x6c,
	0xbb, 0x77, 0xb6, 0xfe, 0x4c, 0xda, 0xd6, 0x8c, 0x76, 0x9f, 0x41, 0x0a, 0x3c, 0xe2, 0x53, 0x51,
	0x61, 0x4c, 0x68, 0x2b, 0x93, 0xc4, 0x12, 0xb1, 0x33, 0xba, 0x6f, 0xff, 0x7e, 0xa8, 0xb6, 0xea,
	0x6f, 0xfc, 0x7f, 0xc5, 0xe2, 0xea, 0x5a, 0xeb, 0x3b, 0xa1, 0x9d, 0xa9, 0xba, 0x78, 0x86, 0x18,
	0x1b, 0x07, 0xf4, 0x86, 0xc4, 0xd0, 0x7d, 0x2b, 0x61, 0xbc, 0xa4, 0x5d, 0x81, 0x82, 0xc5, 0xf3,
	0x2a, 0x13, 0x02, 0xd9, 0x70, 0x77, 0x7c, 0x52, 0x25, 0x7d, 0x59, 0xf5, 0xef, 0xa9, 0xe1, 0xf2,
	0x60, 0x69, 0x47, 0xe8, 0x24, 0x4c, 0x2c, 0xec, 0x53, 0x08, 0x99, 0x5f, 0x4e, 0xc0, 0xff, 0xb1,
	0xea, 0xdf, 0x2d, 0x59, 0x12, 0x9f, 0x58, 0xbb, 0x01, 0x96, 0xdb, 0x91, 0x72, 0x2a, 0xd5, 0x4e,
	0xfc, 0x82, 0xe5, 0x50, 0x4d, 0xe0, 0xaf, 0xe3, 0x65, 0xc0, 0x36, 0x5e, 0xa9, 0x77, 0x84, 0xb6,
	0xcf, 0x39, 0xe4, 0xf2, 0x35, 0xa3, 0x47, 0x6f, 0xb2, 0x20, 0xc8, 0x81, 0x73, 0xdd, 0x63, 0x2d,
	0x8d, 0x53, 0xda, 0xd2, 0x00, 0xaa, 0xbf, 0xc7, 0x7f, 0x06, 0xb0, 0xa7, 0x00, 0xea, 0xa7, 0x75,
	0x46, 0x35, 0x49, 0xc8, 0xd0, 0x5f, 0xc8, 0x6e, 0x9a, 0xae, 0x12, 0xd6, 0x47, 0x42, 0xf7, 0xcf,
	0xeb, 0x15, 0x70, 0xe1, 0x75, 0x01, 0x5c, 0xfc, 0x33, 0x24, 0x93, 0x52, 0xb5, 0x7e, 0xd5, 0xee,
	0x69, 0xae, 0x1d, 0x67, 0x3c, 0xbd, 0x5c, 0x9b, 0xe4, 0x6a, 0x6d, 0x92, 0x6f, 0x6b, 0x93, 0xbc,
	0xdf, 0x98, 0x8d, 0xab, 0x8d, 0xd9, 0xf8, 0xbc, 0x31, 0x1b, 0x2f, 0x9e, 0x86, 0x91, 0x58, 0x14,
	0x9e, 0xed, 0x63, 0xe2, 0xc8, 0x97, 0x23, 0xfe, 0x30, 0x66, 0x1e, 0xaf, 0x85, 0x73, 0x31, 0x7a,
	0xe2, 0xbc, 0xfd, 0xe5, 0x0b, 0x20, 0xca, 0x0c, 0xb8, 0xd7, 0x92, 0x7f, 0x87, 0x47, 0x3f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x0e, 0xbb, 0x2b, 0x94, 0x28, 0x04, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupportedTokens) > 0 {
		for iNdEx := len(m.SupportedTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SupportedTokens[iNdEx])
			copy(dAtA[i:], m.SupportedTokens[iNdEx])
			i = encodeVarintStablestaking(dAtA, i, uint64(len(m.SupportedTokens[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.UnbondingTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.UnbondingTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintStablestaking(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.RewardRate) > 0 {
		i -= len(m.RewardRate)
		copy(dAtA[i:], m.RewardRate)
		i = encodeVarintStablestaking(dAtA, i, uint64(len(m.RewardRate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStablestaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StakingPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalShares.Size()
		i -= size
		if _, err := m.TotalShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStablestaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalStaked.Size()
		i -= size
		if _, err := m.TotalStaked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStablestaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintStablestaking(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintStablestaking(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStablestaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintStablestaking(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnbondTime != 0 {
		i = encodeVarintStablestaking(dAtA, i, uint64(m.UnbondTime))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStablestaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintStablestaking(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStablestaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovStablestaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardRate)
	if l > 0 {
		n += 1 + l + sovStablestaking(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.UnbondingTime)
	n += 1 + l + sovStablestaking(uint64(l))
	if len(m.SupportedTokens) > 0 {
		for _, s := range m.SupportedTokens {
			l = len(s)
			n += 1 + l + sovStablestaking(uint64(l))
		}
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovStablestaking(uint64(l))
	return n
}

func (m *StakingPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovStablestaking(uint64(l))
	}
	l = m.TotalStaked.Size()
	n += 1 + l + sovStablestaking(uint64(l))
	l = m.TotalShares.Size()
	n += 1 + l + sovStablestaking(uint64(l))
	return n
}

func (m *UserStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovStablestaking(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovStablestaking(uint64(l))
	if m.Epoch != 0 {
		n += 1 + sovStablestaking(uint64(m.Epoch))
	}
	return n
}

func (m *UnbondingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovStablestaking(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovStablestaking(uint64(l))
	if m.UnbondTime != 0 {
		n += 1 + sovStablestaking(uint64(m.UnbondTime))
	}
	return n
}

func sovStablestaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStablestaking(x uint64) (n int) {
	return sovStablestaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStablestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStablestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStablestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStablestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStablestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStablestaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStablestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.UnbondingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStablestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStablestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStablestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedTokens = append(m.SupportedTokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStablestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStablestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStablestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStablestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStablestaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStablestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStablestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStablestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStablestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStablestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStablestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStablestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStaked", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStablestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStablestaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStablestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalStaked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStablestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStablestaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStablestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStablestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStablestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStablestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStablestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStablestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStablestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStablestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStablestaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStablestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStablestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStablestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStablestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStablestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStablestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStablestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStablestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStablestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStablestaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStablestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondTime", wireType)
			}
			m.UnbondTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStablestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStablestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStablestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStablestaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStablestaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStablestaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStablestaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStablestaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStablestaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStablestaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStablestaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStablestaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStablestaking = fmt.Errorf("proto: unexpected end of group")
)
